import discord
from discord.ext import commands
from discord import app_commands
from typing import Optional

from io import BytesIO
import requests

from PIL import Image
from PIL import ImageFont
from PIL import ImageDraw

class textbox(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    async def generatetextbox(self, avatarurl, text, name, animated):
        border = Image.open("data/textbox/dt.png")
        img = Image.open("data/textbox/dtbg.png")

        port = Image.open(BytesIO(requests.get(avatarurl).content))
        port = port.resize((134,134), resample=Image.Resampling.NEAREST)
        try:
            img.paste(port, (16,16), port)
        except:  # noqa: E722
            img.paste(port, (16,16))

        draw = ImageDraw.Draw(img)
        font = ImageFont.truetype("data/textbox/dtmono.ttf", 30)
        textpos = 155
        textposlimit = 565
        lines = []

        # autowrap text (word mode (btw i coded it))

        while True:
            nextline = ""
            if textpos + font.getlength(text) < textposlimit:
                lines.append(text)
                break
            while textpos + font.getlength(text) >= textposlimit:
                nextline += text[-1] # <--
                text = text[:-1] # <--
            # detect if space is presented in the last 10 chars
            for num in range(1, 10):
                if text[-num] == " ":
                    nextline = nextline + text[-num:][::-1] # looks cursed but it needs to be reverse
                    text = text[:-num]
                    break
            lines.append(text)
            #[::-1] = reverse the string since we are reading from the back
            text = nextline[::-1].strip()

        # assemble
        text = ""
        for line in range(len(lines)):
            text += lines[line] + "\n"

        # nametag
        if name:
            font = ImageFont.truetype("data/textbox/dtmono.ttf", 16)
            namepos = ((165 - font.getlength(name)) / 2, 130)
            draw.text((namepos[0] + 2, namepos[1] + 2),name,(0,0,0),font=font)
            draw.text(namepos,name,(255,255,255),font=font)

        img.paste(border, (0, 0), border)
        font = ImageFont.truetype("data/textbox/dtmono.ttf", 30)

        if not len(text) > 100 and animated:
            images = []
            drawtext = ""
            for char in text:
                drawtext += char
                temp = img.copy()
                draw = ImageDraw.Draw(temp)
                draw.text((textpos, 30),drawtext,(255,255,255),font=font)
                images.append(temp.copy())
            for frame in range(64): # pauses
                images.append(images[-1])
            with BytesIO() as image_binary:
                images[0].save(image_binary, 'GIF', save_all=True,append_images=images[1:],duration=70,loop=0)
                image_binary.seek(0)
                return discord.File(fp=image_binary, filename='image.gif')
        else:
            draw.text((textpos, 30),text,(255,255,255),font=font)
            with BytesIO() as image_binary:
                img.save(image_binary, 'PNG')
                image_binary.seek(0)
                return discord.File(fp=image_binary, filename='image.png')

        # theres repeated code but I DONT FUCKING CARE

    @commands.Cog.listener()
    async def on_message(self, message):
        if message.author == self.bot.user:
            return
        if message.channel.id == 1234430787924000778:
            image = await self.generatetextbox(avatarurl=message.author.avatar.url, text=message.clean_content, name=None, animated=None)
            await message.channel.send(file=image)
            await message.delete()
        if message.content.lower() == "mtbq":
            messager = await message.channel.fetch_message(message.reference.message_id)
            if messager.content == "":
                return await message.channel.send("cant", reference=message)
            if messager.author == self.bot.user:
                return
            image = await self.generatetextbox(avatarurl=messager.author.avatar.url, text=messager.content, name=messager.author.name, animated=None)
            await message.channel.send("generated by deltafall-bot", file=image, reference=message)

    @app_commands.command(name="textbox", description="makes a textbox")
    @app_commands.choices(animated=[app_commands.Choice(name="Yes", value="true"), app_commands.Choice(name="No", value="false")])
    @app_commands.choices(portrait=[app_commands.Choice(name="Custom Image", value="true"), app_commands.Choice(name="No", value="false")])
    async def textbox(self, interaction: discord.Interaction, portrait: app_commands.Choice[discord.Attachment], name: Optional[str], text: str, animated: Optional[app_commands.Choice[str]]):
        if animated and animated.value == "true":
            image = await self.generatetextbox(avatarurl=portrait.url, text=text, name=name, animated=True)
        else:
            image = await self.generatetextbox(avatarurl=portrait.url, text=text, name=name, animated=None)
        await interaction.response.send_message(file=image)

async def setup(bot):
    await bot.add_cog(textbox(bot))